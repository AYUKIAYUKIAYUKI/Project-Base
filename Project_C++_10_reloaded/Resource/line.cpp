//============================================================================
// 
// ライン [line.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "line.h"

//============================================================================
// デフォルトコンストラクタ
//============================================================================
CLine::CLine() :
	CObject_X{ static_cast<int>(LAYER::BACK) }	// 描画優先度を指定
{

}

//============================================================================
// デストラクタ
//============================================================================
CLine::~CLine()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CLine::Init()
{
	// 基底クラスの初期設定
	HRESULT hr = CObject_X::Init();

	return hr;
}

//============================================================================
// 終了処理
//============================================================================
void CLine::Uninit()
{
	// 基底クラスの終了処理
	CObject_X::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CLine::Update()
{
	// 基底クラスの更新処理
	CObject_X::Update();
}

//============================================================================
// 描画処理
//============================================================================
void CLine::Draw()
{
	// 基底クラスの描画処理
	CObject_X::Draw();
}

//============================================================================
// グリッドライン生成
//============================================================================
void CLine::CreateGrid()
{
	float fLineSize = 20.0f;	// ラインの配置間隔 (モデルサイズは直径20.0f)
	int nMaxLine = 100;			// ラインの数
	bool bAdjust = false;		// 左右の長さ揃えるための調整
	
	// 偶数で割り切れる場合数を1本増やす
	if (nMaxLine % 2 == 0)
	{
		bAdjust = true;
	}

	// 横ラインを自動的には位置していく
	for (int i = 0; i < nMaxLine + bAdjust; i++)
	{
		// インスタンスを生成
		CLine* pLine = DBG_NEW CLine;

		if (pLine == nullptr)
		{ // 生成失敗
			assert(false);
		}

		// タイプを設定
		pLine->SetType(TYPE::NONE);

		// 初期設定
		pLine->Init();

		// 位置を設定
		pLine->SetPos({ (-fLineSize * (nMaxLine / 2)) + (fLineSize * i), 0.0f, fLineSize * 0.5f });

		// モデルを取得
		auto model = CModel_X_Manager::GetInstance()->GetModel(CModel_X_Manager::TYPE::LINE_X);

		// 見た目を設定
		pLine->BindModel(model);

		// サイズを設定
		//pLine->SetSize(model->size);
	}

	// 縦ラインを自動的には位置していく
	for (int i = 0; i < nMaxLine + bAdjust; i++)
	{
		// インスタンスを生成
		CLine* pLine = DBG_NEW CLine;

		if (pLine == nullptr)
		{ // 生成失敗
			assert(false);
		}

		// タイプを設定
		pLine->SetType(TYPE::NONE);

		// 初期設定
		pLine->Init();

		// 位置を設定
		pLine->SetPos({ 0.0f, (-fLineSize * (nMaxLine * 0.5f)) + (fLineSize * i), fLineSize * 0.5f });

		// モデルを取得
		auto model = CModel_X_Manager::GetInstance()->GetModel(CModel_X_Manager::TYPE::LINE_Y);

		// 見た目を設定
		pLine->BindModel(model);

		// サイズを設定
		//pLine->SetSize(model->size);
	}
}