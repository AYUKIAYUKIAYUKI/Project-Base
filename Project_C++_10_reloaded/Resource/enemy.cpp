//============================================================================
// 
// エネミー [enemy.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "enemy.h"
#include "utility.h"
#include "sound.h"

// シーン取得用
#include "manager.h"

// オブジェクト情報用 
#include "block.h"
#include "block_destructible.h"
#include "block_spikes.h"
#include "bullet.h"
#include "explosion.h"


// デバッグ表示用
#include "renderer.h"

//============================================================================
// デフォルトコンストラクタ
//============================================================================
CEnemy::CEnemy() :
	CObject_X{ static_cast<int>(LAYER::MIDDLE) },	// 描画優先度を指定
	m_nCast{ 0 }									// 攻撃間隔
{

}

//============================================================================
// プライオリティ指定コンストラクタ
//============================================================================
CEnemy::CEnemy(LAYER priority) :
	CObject_X{ static_cast<int>(priority) },	// 基底クラスのコンストラクタ
	m_nCast{ 0 }								// 攻撃間隔
{

}

//============================================================================
// デストラクタ
//============================================================================
CEnemy::~CEnemy()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CEnemy::Init()
{
	// 基底クラスの初期設定
	HRESULT hr = CObject_X::Init();

	return hr;
}

//============================================================================
// 終了処理
//============================================================================
void CEnemy::Uninit()
{
	// 基底クラスの終了処理
	CObject_X::Uninit();
}

//============================================================================
// 更新処理
//============================================================================
void CEnemy::Update()
{
	// シーン情報を取得
	CScene* pScene = CManager::GetScene();

	// ステージデバッグモード時は処理を行わない
	if (pScene->GetMode() != CScene::MODE::STAGE)
	{
		// 攻撃をキャスト
		m_nCast++;

		/* 弾丸のキャスト状態を表示 */
		//CRenderer::GetInstance()->SetDebugString("弾丸キャスト : " + std::to_string(m_nCast));

		// 弾を発射
		if (m_nCast > 200)
		{
			m_nCast = 0;

			CBullet::Create(GetPos(), { 10.0f, 10.0f, 0.0f });

			// 発射音
			CSound::GetInstance()->Play(CSound::LABEL::SHOT);
		}

		// 当たり判定
		Collision();
	}

	// 基底クラスの更新
	CObject_X::Update();
}

//============================================================================
// 描画処理
//============================================================================
void CEnemy::Draw()
{
	// 基底クラスの描画処理
	CObject_X::Draw();
}

//============================================================================
// 当たり判定
//============================================================================
bool CEnemy::Collision()
{
	// 衝突検出
	bool bDetected = 0;

	return bDetected;
}

//============================================================================
// 生成
//============================================================================
CEnemy* CEnemy::Create(D3DXVECTOR3 pos)
{
	// インスタンスを生成
	CEnemy* pEnemy = DBG_NEW CEnemy;

	if (pEnemy == nullptr)
	{ // 生成失敗
		assert(false);
	}

	// タイプを設定
	pEnemy->SetType(TYPE::ENEMY);

	// 基底クラスの初期設定
	pEnemy->Init();

	// 位置の設定
	pEnemy->SetPos(pos);

	// モデルを取得
	auto model = CModel_X_Manager::GetInstance()->GetModel(CModel_X_Manager::TYPE::ENEMY);

	// モデルを設定
	pEnemy->BindModel(model);

	// サイズを設定
	pEnemy->SetSize(model->size);

	// 描画される前に一度更新しておく
	pEnemy->Update();

	return pEnemy;
}