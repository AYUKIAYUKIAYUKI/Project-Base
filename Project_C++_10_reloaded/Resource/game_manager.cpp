//============================================================================
// 
// ゲームマネージャー [game_manager.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "game_manager.h"
#include "stagemaker.h"

// オブジェクト生成用
#include "player.h"
#include "score.h"

//****************************************************
// 静的メンバ変数の初期化
//****************************************************
CGameManager* CGameManager::m_pGameManager = nullptr;	// 自クラス情報

//============================================================================
// コンストラクタ
//============================================================================
CGameManager::CGameManager()
{
	m_phase = PHASE::NONE;	// フェーズ識別

	m_pGameManager = nullptr;	// 自クラス情報の初期化
}

//============================================================================
// デストラクタ
//============================================================================
CGameManager::~CGameManager()
{

}

//============================================================================
// 初期設定
//============================================================================
void CGameManager::Init()
{
	// 開始フェーズへ
	m_phase = PHASE::BEGIN;

	// レベルを読み込む
	ImportLevel();

	// スコアの生成
	CScore::Create(
		{ 25.0f, 30.0f, 0.0f },	// 位置
		25.0f);					// 数列の配置間隔
}

//============================================================================
// 終了処理
//============================================================================
void CGameManager::Uninit()
{

}

//============================================================================
// 更新処理
//============================================================================
void CGameManager::Update()
{
	// プレイヤータイプのオブジェクト用ぽインタ
	CObject* pPlayerObject = nullptr;

	switch (m_phase)
	{
	case PHASE::NONE:

		// ここデバッグ

		break;

	case PHASE::BEGIN:

		// ステージを読み込む
		CStageMaker::GetInstance()->Import(m_stagePath[0]);

		// プレイヤーの生成
		CPlayer::Create({ 0.0f, 0.0f, 0.0f });	// 位置

		// プレイフェーズへ
		m_phase = PHASE::PLAY;

		break;

	case PHASE::PLAY:

		break;

	case PHASE::END:
	
		// プレイヤーの破棄(なんで)
		pPlayerObject = CObject::FindObject(CObject::TYPE::PLAYER);

		// プレイヤーオブジェクトを削除
		pPlayerObject->Release();

		// 一旦すべてを停止
		m_phase = PHASE::NONE;

		break;

	default:

		// フェーズエラー
		assert(false);
		
		break;
	}
}

//============================================================================
// 生成
//============================================================================
void CGameManager::Create()
{
	if (m_pGameManager != nullptr)
	{ // 二重生成禁止
		assert(false);
	}

	// インスタンスを生成
	m_pGameManager = DBG_NEW CGameManager;

	// 初期設定
	m_pGameManager->Init();
}

//============================================================================
// 解放
//============================================================================
void CGameManager::Release()
{
	if (m_pGameManager != nullptr)
	{
		// 終了処理
		m_pGameManager->Uninit();

		// メモリを解放
		delete m_pGameManager;

		// ポインタを初期化
		m_pGameManager = nullptr;
	}
}

//============================================================================
// フェーズを設定
//============================================================================
void CGameManager::SetPhase(PHASE phase)
{
	m_phase = phase;
}

//============================================================================
// 取得
//============================================================================
CGameManager* CGameManager::GetInstance()
{
	if (m_pGameManager == nullptr)
	{
		// 生成
		m_pGameManager->Create();
	}

	return m_pGameManager;
}

//============================================================================
// レベル読み込み
//============================================================================
void CGameManager::ImportLevel()
{
	std::ifstream Import("Data\\TXT\\level.txt");

	if (!Import)
	{ // 展開失敗
		assert(false);
	}

	// 文章格納先
	std::string str;

	// ステージカウント
	int nCntStage = 0;

	// テキストを読み取る
	while (std::getline(Import, str))
	{
		// ステージのパスを保持
		m_stagePath.push_back(str);

		// ステージ数をカウントアップ
		nCntStage++;
	}

	// ステージ数を保持
	m_nMaxStage = nCntStage;
}